import {
  CSSTransition
} from "./chunk-VPWPOJQI.js";
import "./chunk-RMAPONUR.js";
import "./chunk-GB5MV2FE.js";
import "./chunk-H34UXRLQ.js";
import {
  Portal,
  useOverlayListener,
  useUnmountEffect
} from "./chunk-R35VVHOE.js";
import {
  ComponentBase,
  DomHandler,
  EventBus,
  IconUtils,
  ObjectUtils,
  PrimeReact,
  PrimeReactContext,
  ZIndexUtils,
  classNames,
  mergeProps
} from "./chunk-C3N6LN5J.js";
import "./chunk-GHDA5FLN.js";
import {
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/primereact/menu/menu.esm.js
var React = __toESM(require_react());

// node_modules/primereact/overlayservice/overlayservice.esm.js
var OverlayService = EventBus();

// node_modules/primereact/menu/menu.esm.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var MenuBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Menu",
    id: null,
    model: null,
    popup: false,
    popupAlignment: "left",
    style: null,
    className: null,
    autoZIndex: true,
    baseZIndex: 0,
    appendTo: null,
    transitionOptions: null,
    onShow: null,
    onHide: null,
    children: void 0
  }
});
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var Menu = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = MenuBase.getProps(inProps, context);
  var _React$useState = React.useState(!props.popup), _React$useState2 = _slicedToArray(_React$useState, 2), visibleState = _React$useState2[0], setVisibleState = _React$useState2[1];
  var _MenuBase$setMetaData = MenuBase.setMetaData({
    props,
    state: {
      visible: visibleState
    }
  }), ptm = _MenuBase$setMetaData.ptm;
  var menuRef = React.useRef(null);
  var targetRef = React.useRef(null);
  var _useOverlayListener = useOverlayListener({
    target: targetRef,
    overlay: menuRef,
    listener: function listener(event, _ref) {
      var valid = _ref.valid;
      valid && hide(event);
    },
    when: visibleState
  }), _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2), bindOverlayListener = _useOverlayListener2[0], unbindOverlayListener = _useOverlayListener2[1];
  var onPanelClick = function onPanelClick2(event) {
    if (props.popup) {
      OverlayService.emit("overlay-click", {
        originalEvent: event,
        target: targetRef.current
      });
    }
  };
  var onItemClick = function onItemClick2(event, item) {
    if (item.disabled) {
      event.preventDefault();
      return;
    }
    if (!item.url) {
      event.preventDefault();
    }
    if (item.command) {
      item.command({
        originalEvent: event,
        item
      });
    }
    if (props.popup) {
      hide(event);
    }
  };
  var onItemKeyDown = function onItemKeyDown2(event, item) {
    var listItem = event.currentTarget.parentElement;
    switch (event.which) {
      case 40:
        var nextItem = findNextItem(listItem);
        nextItem && nextItem.children[0].focus();
        event.preventDefault();
        break;
      case 38:
        var prevItem = findPrevItem(listItem);
        prevItem && prevItem.children[0].focus();
        event.preventDefault();
        break;
    }
  };
  var findNextItem = function findNextItem2(item) {
    var nextItem = item.nextElementSibling;
    return nextItem ? DomHandler.hasClass(nextItem, "p-disabled") || !DomHandler.hasClass(nextItem, "p-menuitem") ? findNextItem2(nextItem) : nextItem : null;
  };
  var findPrevItem = function findPrevItem2(item) {
    var prevItem = item.previousElementSibling;
    return prevItem ? DomHandler.hasClass(prevItem, "p-disabled") || !DomHandler.hasClass(prevItem, "p-menuitem") ? findPrevItem2(prevItem) : prevItem : null;
  };
  var toggle = function toggle2(event) {
    if (props.popup) {
      visibleState ? hide(event) : show(event);
    }
  };
  var show = function show2(event) {
    targetRef.current = event.currentTarget;
    setVisibleState(true);
    props.onShow && props.onShow(event);
  };
  var hide = function hide2(event) {
    targetRef.current = event.currentTarget;
    setVisibleState(false);
    props.onHide && props.onHide(event);
  };
  var onEnter = function onEnter2() {
    ZIndexUtils.set("menu", menuRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex["menu"] || PrimeReact.zIndex["menu"]);
    DomHandler.absolutePosition(menuRef.current, targetRef.current, props.popupAlignment);
  };
  var onEntered = function onEntered2() {
    bindOverlayListener();
  };
  var onExit = function onExit2() {
    targetRef.current = null;
    unbindOverlayListener();
  };
  var onExited = function onExited2() {
    ZIndexUtils.clear(menuRef.current);
  };
  useUnmountEffect(function() {
    ZIndexUtils.clear(menuRef.current);
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      toggle,
      show,
      hide,
      getElement: function getElement() {
        return menuRef.current;
      },
      getTarget: function getTarget() {
        return targetRef.current;
      }
    };
  });
  var createSubmenu = function createSubmenu2(submenu, index) {
    var key = submenu.label + "_" + index;
    var className = classNames("p-submenu-header", {
      "p-disabled": submenu.disabled
    }, submenu.className);
    var items = submenu.items.map(createMenuItem);
    var submenuHeaderProps = mergeProps({
      className,
      style: submenu.style,
      role: "presentation"
    }, ptm("submenuHeader"));
    return React.createElement(React.Fragment, {
      key
    }, React.createElement("li", submenuHeaderProps, submenu.label), items);
  };
  var createSeparator = function createSeparator2(index) {
    var key = "separator_" + index;
    var separatorProps = mergeProps({
      key,
      className: "p-menu-separator",
      role: "separator"
    }, ptm("separator"));
    return React.createElement("li", separatorProps);
  };
  var createMenuItem = function createMenuItem2(item, index) {
    if (item.visible === false) {
      return null;
    }
    var className = classNames("p-menuitem", item.className);
    var linkClassName = classNames("p-menuitem-link", {
      "p-disabled": item.disabled
    });
    var iconClassName = classNames("p-menuitem-icon", item.icon);
    var iconProps = mergeProps({
      className: "p-menuitem-icon"
    }, ptm("icon"));
    var icon = IconUtils.getJSXIcon(item.icon, _objectSpread({}, iconProps), {
      props
    });
    var labelProps = mergeProps({
      className: "p-menuitem-text"
    }, ptm("label"));
    var label = item.label && React.createElement("span", labelProps, item.label);
    var tabIndex = item.disabled ? null : 0;
    var key = item.label + "_" + index;
    var actionProps = mergeProps({
      href: item.url || "#",
      className: linkClassName,
      role: "menuitem",
      target: item.target,
      onClick: function onClick(event) {
        return onItemClick(event, item);
      },
      onKeyDown: function onKeyDown(event) {
        return onItemKeyDown(event);
      },
      tabIndex,
      "aria-disabled": item.disabled
    }, ptm("action"));
    var content = React.createElement("a", actionProps, icon, label);
    if (item.template) {
      var defaultContentOptions = {
        onClick: function onClick(event) {
          return onItemClick(event, item);
        },
        onKeyDown: function onKeyDown(event) {
          return onItemKeyDown(event);
        },
        className: linkClassName,
        tabIndex,
        labelClassName: "p-menuitem-text",
        iconClassName,
        element: content,
        props
      };
      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);
    }
    var menuitemProps = mergeProps({
      key,
      className,
      style: item.style,
      role: "none"
    }, ptm("menuitem"));
    return React.createElement("li", menuitemProps, content);
  };
  var createItem = function createItem2(item, index) {
    return item.separator ? createSeparator(index) : item.items ? createSubmenu(item, index) : createMenuItem(item, index);
  };
  var createMenu = function createMenu2() {
    return props.model.map(createItem);
  };
  var createElement2 = function createElement3() {
    if (props.model) {
      var className = classNames("p-menu p-component", {
        "p-menu-overlay": props.popup,
        "p-input-filled": context && context.inputStyle === "filled" || PrimeReact.inputStyle === "filled",
        "p-ripple-disabled": context && context.ripple === false || PrimeReact.ripple === false
      }, props.className);
      var menuitems = createMenu();
      var rootProps = mergeProps({
        ref: menuRef,
        id: props.id,
        className,
        style: props.style,
        onClick: function onClick(e) {
          return onPanelClick(e);
        }
      }, MenuBase.getOtherProps(props), ptm("root"));
      var menuProps = mergeProps({
        className: "p-menu-list p-reset",
        role: "menu"
      }, ptm("menu"));
      return React.createElement(CSSTransition, {
        nodeRef: menuRef,
        classNames: "p-connected-overlay",
        "in": visibleState,
        timeout: {
          enter: 120,
          exit: 100
        },
        options: props.transitionOptions,
        unmountOnExit: true,
        onEnter,
        onEntered,
        onExit,
        onExited
      }, React.createElement("div", rootProps, React.createElement("ul", menuProps, menuitems)));
    }
    return null;
  };
  var element = createElement2();
  return props.popup ? React.createElement(Portal, {
    element,
    appendTo: props.appendTo
  }) : element;
}));
Menu.displayName = "Menu";
export {
  Menu
};
//# sourceMappingURL=primereact_menu.js.map
