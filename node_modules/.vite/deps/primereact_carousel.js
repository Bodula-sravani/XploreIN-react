import {
  IconBase,
  Ripple
} from "./chunk-SM63V2XH.js";
import {
  useMountEffect,
  usePrevious,
  useResizeListener,
  useUnmountEffect,
  useUpdateEffect
} from "./chunk-RHOSELWA.js";
import {
  ComponentBase,
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReact,
  PrimeReactContext,
  UniqueComponentId,
  ariaLabel,
  classNames,
  mergeProps
} from "./chunk-Q5MJ6NXD.js";
import {
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/primereact/carousel/carousel.esm.js
var React5 = __toESM(require_react());

// node_modules/primereact/icons/chevrondown/index.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var ChevronDownIcon = React.memo(React.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React.createElement("svg", _extends({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React.createElement("path", {
    d: "M7.01744 10.398C6.91269 10.3985 6.8089 10.378 6.71215 10.3379C6.61541 10.2977 6.52766 10.2386 6.45405 10.1641L1.13907 4.84913C1.03306 4.69404 0.985221 4.5065 1.00399 4.31958C1.02276 4.13266 1.10693 3.95838 1.24166 3.82747C1.37639 3.69655 1.55301 3.61742 1.74039 3.60402C1.92777 3.59062 2.11386 3.64382 2.26584 3.75424L7.01744 8.47394L11.769 3.75424C11.9189 3.65709 12.097 3.61306 12.2748 3.62921C12.4527 3.64535 12.6199 3.72073 12.7498 3.84328C12.8797 3.96582 12.9647 4.12842 12.9912 4.30502C13.0177 4.48162 12.9841 4.662 12.8958 4.81724L7.58083 10.1322C7.50996 10.2125 7.42344 10.2775 7.32656 10.3232C7.22968 10.3689 7.12449 10.3944 7.01744 10.398Z",
    fill: "currentColor"
  }));
}));
ChevronDownIcon.displayName = "ChevronDownIcon";

// node_modules/primereact/icons/chevronleft/index.esm.js
var React2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var ChevronLeftIcon = React2.memo(React2.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React2.createElement("svg", _extends2({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React2.createElement("path", {
    d: "M9.61296 13C9.50997 13.0005 9.40792 12.9804 9.3128 12.9409C9.21767 12.9014 9.13139 12.8433 9.05902 12.7701L3.83313 7.54416C3.68634 7.39718 3.60388 7.19795 3.60388 6.99022C3.60388 6.78249 3.68634 6.58325 3.83313 6.43628L9.05902 1.21039C9.20762 1.07192 9.40416 0.996539 9.60724 1.00012C9.81032 1.00371 10.0041 1.08597 10.1477 1.22959C10.2913 1.37322 10.3736 1.56698 10.3772 1.77005C10.3808 1.97313 10.3054 2.16968 10.1669 2.31827L5.49496 6.99022L10.1669 11.6622C10.3137 11.8091 10.3962 12.0084 10.3962 12.2161C10.3962 12.4238 10.3137 12.6231 10.1669 12.7701C10.0945 12.8433 10.0083 12.9014 9.91313 12.9409C9.81801 12.9804 9.71596 13.0005 9.61296 13Z",
    fill: "currentColor"
  }));
}));
ChevronLeftIcon.displayName = "ChevronLeftIcon";

// node_modules/primereact/icons/chevronright/index.esm.js
var React3 = __toESM(require_react());
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var ChevronRightIcon = React3.memo(React3.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React3.createElement("svg", _extends3({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React3.createElement("path", {
    d: "M4.38708 13C4.28408 13.0005 4.18203 12.9804 4.08691 12.9409C3.99178 12.9014 3.9055 12.8433 3.83313 12.7701C3.68634 12.6231 3.60388 12.4238 3.60388 12.2161C3.60388 12.0084 3.68634 11.8091 3.83313 11.6622L8.50507 6.99022L3.83313 2.31827C3.69467 2.16968 3.61928 1.97313 3.62287 1.77005C3.62645 1.56698 3.70872 1.37322 3.85234 1.22959C3.99596 1.08597 4.18972 1.00371 4.3928 1.00012C4.59588 0.996539 4.79242 1.07192 4.94102 1.21039L10.1669 6.43628C10.3137 6.58325 10.3962 6.78249 10.3962 6.99022C10.3962 7.19795 10.3137 7.39718 10.1669 7.54416L4.94102 12.7701C4.86865 12.8433 4.78237 12.9014 4.68724 12.9409C4.59212 12.9804 4.49007 13.0005 4.38708 13Z",
    fill: "currentColor"
  }));
}));
ChevronRightIcon.displayName = "ChevronRightIcon";

// node_modules/primereact/icons/chevronup/index.esm.js
var React4 = __toESM(require_react());
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
var ChevronUpIcon = React4.memo(React4.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React4.createElement("svg", _extends4({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React4.createElement("path", {
    d: "M12.2097 10.4113C12.1057 10.4118 12.0027 10.3915 11.9067 10.3516C11.8107 10.3118 11.7237 10.2532 11.6506 10.1792L6.93602 5.46461L2.22139 10.1476C2.07272 10.244 1.89599 10.2877 1.71953 10.2717C1.54307 10.2556 1.3771 10.1808 1.24822 10.0593C1.11933 9.93766 1.035 9.77633 1.00874 9.6011C0.982477 9.42587 1.0158 9.2469 1.10338 9.09287L6.37701 3.81923C6.52533 3.6711 6.72639 3.58789 6.93602 3.58789C7.14565 3.58789 7.3467 3.6711 7.49502 3.81923L12.7687 9.09287C12.9168 9.24119 13 9.44225 13 9.65187C13 9.8615 12.9168 10.0626 12.7687 10.2109C12.616 10.3487 12.4151 10.4207 12.2097 10.4113Z",
    fill: "currentColor"
  }));
}));
ChevronUpIcon.displayName = "ChevronUpIcon";

// node_modules/primereact/carousel/carousel.esm.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var CarouselBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Carousel",
    id: null,
    value: null,
    page: 0,
    header: null,
    footer: null,
    style: null,
    className: null,
    itemTemplate: null,
    circular: false,
    showIndicators: true,
    showNavigators: true,
    autoplayInterval: 0,
    numVisible: 1,
    numScroll: 1,
    prevIcon: null,
    nextIcon: null,
    responsiveOptions: null,
    orientation: "horizontal",
    verticalViewPortHeight: "300px",
    contentClassName: null,
    containerClassName: null,
    indicatorsContentClassName: null,
    onPageChange: null,
    children: void 0
  }
});
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var CarouselItem = React5.memo(function(props) {
  var content = props.template(props.item);
  var className = classNames(props.className, "p-carousel-item", {
    "p-carousel-item-active": props.active,
    "p-carousel-item-start": props.start,
    "p-carousel-item-end": props.end
  });
  var ptParams = props.className && props.className === "p-carousel-item-cloned" ? props.ptm("itemCloned") : props.ptm("item");
  var itemClonedProps = mergeProps({
    className
  }, ptParams);
  return React5.createElement("div", itemClonedProps, content);
});
var Carousel = React5.memo(React5.forwardRef(function(inProps, ref) {
  var context = React5.useContext(PrimeReactContext);
  var props = CarouselBase.getProps(inProps, context);
  var _React$useState = React5.useState(props.numVisible), _React$useState2 = _slicedToArray(_React$useState, 2), numVisibleState = _React$useState2[0], setNumVisibleState = _React$useState2[1];
  var _React$useState3 = React5.useState(props.numScroll), _React$useState4 = _slicedToArray(_React$useState3, 2), numScrollState = _React$useState4[0], setNumScrollState = _React$useState4[1];
  var _React$useState5 = React5.useState(props.page * props.numScroll * -1), _React$useState6 = _slicedToArray(_React$useState5, 2), totalShiftedItemsState = _React$useState6[0], setTotalShiftedItemsState = _React$useState6[1];
  var _React$useState7 = React5.useState(props.page), _React$useState8 = _slicedToArray(_React$useState7, 2), pageState = _React$useState8[0], setPageState = _React$useState8[1];
  var _CarouselBase$setMeta = CarouselBase.setMetaData({
    props,
    state: {
      numVisible: numVisibleState,
      numScroll: numScrollState,
      totalShiftedItems: totalShiftedItemsState,
      page: pageState
    }
  }), ptm = _CarouselBase$setMeta.ptm;
  var elementRef = React5.useRef(null);
  var itemsContainerRef = React5.useRef(null);
  var remainingItems = React5.useRef(0);
  var allowAutoplay = React5.useRef(!!props.autoplayInterval);
  var attributeSelector = React5.useRef("");
  var swipeThreshold = React5.useRef(20);
  var startPos = React5.useRef(null);
  var interval = React5.useRef(null);
  var carouselStyle = React5.useRef(null);
  var isRemainingItemsAdded = React5.useRef(false);
  var responsiveOptions = React5.useRef(null);
  var prevNumScroll = usePrevious(numScrollState);
  var prevNumVisible = usePrevious(numVisibleState);
  var prevValue = usePrevious(props.value);
  var prevPage = usePrevious(props.page);
  var isVertical = props.orientation === "vertical";
  var circular = props.circular || !!props.autoplayInterval;
  var isCircular = circular && props.value && props.value.length >= numVisibleState;
  var totalIndicators = props.value ? Math.max(Math.ceil((props.value.length - numVisibleState) / numScrollState) + 1, 0) : 0;
  var isAutoplay = totalIndicators && props.autoplayInterval && allowAutoplay.current;
  var isControlled = props.onPageChange && !isAutoplay;
  var currentPage = isControlled ? props.page : pageState;
  var _useResizeListener = useResizeListener({
    listener: function listener() {
      calculatePosition();
    },
    when: props.responsiveOptions
  }), _useResizeListener2 = _slicedToArray(_useResizeListener, 1), bindWindowResizeListener = _useResizeListener2[0];
  var step = function step2(dir, page) {
    var totalShiftedItems = totalShiftedItemsState;
    if (page != null) {
      totalShiftedItems = numScrollState * page * -1;
      if (isCircular) {
        totalShiftedItems -= numVisibleState;
      }
      isRemainingItemsAdded.current = false;
    } else {
      totalShiftedItems += numScrollState * dir;
      if (isRemainingItemsAdded.current) {
        totalShiftedItems += remainingItems.current - numScrollState * dir;
        isRemainingItemsAdded.current = false;
      }
      var originalShiftedItems = isCircular ? totalShiftedItems + numVisibleState : totalShiftedItems;
      page = Math.abs(Math.floor(originalShiftedItems / numScrollState));
    }
    if (isCircular && pageState === totalIndicators - 1 && dir === -1) {
      totalShiftedItems = -1 * (props.value.length + numVisibleState);
      page = 0;
    } else if (isCircular && pageState === 0 && dir === 1) {
      totalShiftedItems = 0;
      page = totalIndicators - 1;
    } else if (page === totalIndicators - 1 && remainingItems.current > 0) {
      totalShiftedItems += remainingItems.current * -1 - numScrollState * dir;
      isRemainingItemsAdded.current = true;
    }
    if (itemsContainerRef.current) {
      DomHandler.removeClass(itemsContainerRef.current, "p-items-hidden");
      changePosition(totalShiftedItems);
      itemsContainerRef.current.style.transition = "transform 500ms ease 0s";
    }
    changePage(page);
    setTotalShiftedItemsState(totalShiftedItems);
  };
  var calculatePosition = function calculatePosition2() {
    if (itemsContainerRef.current && responsiveOptions.current) {
      var windowWidth = window.innerWidth;
      var matchedResponsiveData = {
        numVisible: props.numVisible,
        numScroll: props.numScroll
      };
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        if (parseInt(res.breakpoint, 10) >= windowWidth) {
          matchedResponsiveData = res;
        }
      }
      if (numScrollState !== matchedResponsiveData.numScroll) {
        var page = Math.floor(currentPage * numScrollState / matchedResponsiveData.numScroll);
        var totalShiftedItems = matchedResponsiveData.numScroll * page * -1;
        if (isCircular) {
          totalShiftedItems -= matchedResponsiveData.numVisible;
        }
        setTotalShiftedItemsState(totalShiftedItems);
        setNumScrollState(matchedResponsiveData.numScroll);
        changePage(page);
      }
      if (numVisibleState !== matchedResponsiveData.numVisible) {
        setNumVisibleState(matchedResponsiveData.numVisible);
      }
    }
  };
  var navBackward = function navBackward2(e, page) {
    if (circular || currentPage !== 0) {
      step(1, page);
    }
    allowAutoplay.current = false;
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var navForward = function navForward2(e, page) {
    if (circular || currentPage < totalIndicators - 1) {
      step(-1, page);
    }
    allowAutoplay.current = false;
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var onDotClick = function onDotClick2(e, page) {
    if (page > currentPage) {
      navForward(e, page);
    } else if (page < currentPage) {
      navBackward(e, page);
    }
  };
  var onTransitionEnd = function onTransitionEnd2(e) {
    if (itemsContainerRef.current && e.propertyName === "transform") {
      DomHandler.addClass(itemsContainerRef.current, "p-items-hidden");
      itemsContainerRef.current.style.transition = "";
      if ((pageState === 0 || pageState === totalIndicators - 1) && isCircular) {
        changePosition(totalShiftedItemsState);
      }
    }
  };
  var _onTouchStart = function onTouchStart(e) {
    var touchobj = e.changedTouches[0];
    startPos.current = {
      x: touchobj.pageX,
      y: touchobj.pageY
    };
  };
  var _onTouchMove = function onTouchMove(e) {
    if (e.cancelable) {
      e.preventDefault();
    }
  };
  var _onTouchEnd = function onTouchEnd(e) {
    var touchobj = e.changedTouches[0];
    if (isVertical) {
      changePageOnTouch(e, touchobj.pageY - startPos.current.y);
    } else {
      changePageOnTouch(e, touchobj.pageX - startPos.current.x);
    }
  };
  var changePageOnTouch = function changePageOnTouch2(e, diff) {
    if (Math.abs(diff) > swipeThreshold) {
      if (diff < 0) {
        navForward(e);
      } else {
        navBackward(e);
      }
    }
  };
  var startAutoplay = function startAutoplay2() {
    if (props.autoplayInterval > 0) {
      interval.current = setInterval(function() {
        if (pageState === totalIndicators - 1) {
          step(-1, 0);
        } else {
          step(-1, pageState + 1);
        }
      }, props.autoplayInterval);
    }
  };
  var stopAutoplay = function stopAutoplay2() {
    if (interval.current) {
      clearInterval(interval.current);
    }
  };
  var createStyle = function createStyle2() {
    if (!carouselStyle.current) {
      carouselStyle.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact.nonce);
    }
    var innerHTML = "\n            .p-carousel[".concat(attributeSelector.current, "] .p-carousel-item {\n                flex: 1 0 ").concat(100 / numVisibleState, "%\n            }\n        ");
    if (props.responsiveOptions) {
      responsiveOptions.current = _toConsumableArray(props.responsiveOptions);
      responsiveOptions.current.sort(function(data1, data2) {
        var value1 = data1.breakpoint;
        var value2 = data2.breakpoint;
        return ObjectUtils.sort(value1, value2, -1, context && context.locale || PrimeReact.locale, context && context.nullSortOrder || PrimeReact.nullSortOrder);
      });
      for (var i = 0; i < responsiveOptions.current.length; i++) {
        var res = responsiveOptions.current[i];
        innerHTML += "\n                    @media screen and (max-width: ".concat(res.breakpoint, ") {\n                        .p-carousel[").concat(attributeSelector.current, "] .p-carousel-item {\n                            flex: 1 0 ").concat(100 / res.numVisible, "%\n                        }\n                    }\n                ");
      }
    }
    carouselStyle.current.innerHTML = innerHTML;
  };
  var destroyStyle = function destroyStyle2() {
    carouselStyle.current = DomHandler.removeInlineStyle(carouselStyle.current);
  };
  var changePosition = function changePosition2(totalShiftedItems) {
    if (itemsContainerRef.current) {
      itemsContainerRef.current.style.transform = isVertical ? "translate3d(0, ".concat(totalShiftedItems * (100 / numVisibleState), "%, 0)") : "translate3d(".concat(totalShiftedItems * (100 / numVisibleState), "%, 0, 0)");
    }
  };
  var changePage = function changePage2(page) {
    !isControlled && setPageState(page);
    props.onPageChange && props.onPageChange({
      page
    });
  };
  React5.useImperativeHandle(ref, function() {
    return {
      props,
      startAutoplay,
      stopAutoplay,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useMountEffect(function() {
    if (elementRef.current) {
      attributeSelector.current = UniqueComponentId();
      elementRef.current.setAttribute(attributeSelector.current, "");
    }
    createStyle();
    calculatePosition();
    changePosition(totalShiftedItemsState);
    bindWindowResizeListener();
  });
  useUpdateEffect(function() {
    var stateChanged = false;
    var totalShiftedItems = totalShiftedItemsState;
    if (props.autoplayInterval) {
      stopAutoplay();
    }
    if (prevNumScroll !== numScrollState || prevNumVisible !== numVisibleState || props.value && prevValue && prevValue.length !== props.value.length) {
      remainingItems.current = (props.value.length - numVisibleState) % numScrollState;
      var page = currentPage;
      if (totalIndicators !== 0 && page >= totalIndicators) {
        page = totalIndicators - 1;
        changePage(page);
        stateChanged = true;
      }
      totalShiftedItems = page * numScrollState * -1;
      if (isCircular) {
        totalShiftedItems -= numVisibleState;
      }
      if (page === totalIndicators - 1 && remainingItems.current > 0) {
        totalShiftedItems += -1 * remainingItems.current + numScrollState;
        isRemainingItemsAdded.current = true;
      } else {
        isRemainingItemsAdded.current = false;
      }
      if (totalShiftedItems !== totalShiftedItemsState) {
        setTotalShiftedItemsState(totalShiftedItems);
        stateChanged = true;
      }
      changePosition(totalShiftedItems);
    }
    if (isCircular) {
      if (pageState === 0) {
        totalShiftedItems = -1 * numVisibleState;
      } else if (totalShiftedItems === 0) {
        totalShiftedItems = -1 * props.value.length;
        if (remainingItems.current > 0) {
          isRemainingItemsAdded.current = true;
        }
      }
      if (totalShiftedItems !== totalShiftedItemsState) {
        setTotalShiftedItemsState(totalShiftedItems);
        stateChanged = true;
      }
    }
    if (prevPage !== props.page) {
      if (props.page > prevPage && props.page <= totalIndicators - 1) {
        step(-1, props.page);
      } else if (props.page < prevPage) {
        step(1, props.page);
      }
    }
    if (!stateChanged && isAutoplay) {
      startAutoplay();
    }
  });
  useUnmountEffect(function() {
    if (props.autoplayInterval) {
      stopAutoplay();
    }
    destroyStyle();
  });
  var createItems = function createItems2() {
    if (props.value && props.value.length) {
      var clonedItemsForStarting = null;
      var clonedItemsForFinishing = null;
      if (isCircular) {
        var clonedElements = null;
        clonedElements = props.value.slice(-1 * numVisibleState);
        clonedItemsForStarting = clonedElements.map(function(item, index) {
          var isActive = totalShiftedItemsState * -1 === props.value.length + numVisibleState;
          var start = index === 0;
          var end = index === clonedElements.length - 1;
          var key = index + "_scloned";
          return React5.createElement(CarouselItem, {
            key,
            className: "p-carousel-item-cloned",
            template: props.itemTemplate,
            item,
            active: isActive,
            start,
            end,
            ptm
          });
        });
        clonedElements = props.value.slice(0, numVisibleState);
        clonedItemsForFinishing = clonedElements.map(function(item, index) {
          var isActive = totalShiftedItemsState === 0;
          var start = index === 0;
          var end = index === clonedElements.length - 1;
          var key = index + "_fcloned";
          return React5.createElement(CarouselItem, {
            key,
            className: "p-carousel-item-cloned",
            template: props.itemTemplate,
            item,
            active: isActive,
            start,
            end,
            ptm
          });
        });
      }
      var items = props.value.map(function(item, index) {
        var firstIndex = isCircular ? -1 * (totalShiftedItemsState + numVisibleState) : totalShiftedItemsState * -1;
        var lastIndex = firstIndex + numVisibleState - 1;
        var isActive = firstIndex <= index && lastIndex >= index;
        var start = firstIndex === index;
        var end = lastIndex === index;
        return React5.createElement(CarouselItem, {
          key: index,
          template: props.itemTemplate,
          item,
          active: isActive,
          start,
          end,
          ptm
        });
      });
      return React5.createElement(React5.Fragment, null, clonedItemsForStarting, items, clonedItemsForFinishing);
    }
  };
  var createHeader = function createHeader2() {
    if (props.header) {
      var headerProps = mergeProps({
        className: "p-carousel-header"
      }, ptm("header"));
      return React5.createElement("div", headerProps, props.header);
    }
    return null;
  };
  var createFooter = function createFooter2() {
    if (props.footer) {
      var footerProps = mergeProps({
        className: "p-carousel-footer"
      }, ptm("footer"));
      return React5.createElement("div", footerProps, props.footer);
    }
    return null;
  };
  var createContent = function createContent2() {
    var items = createItems();
    var height = isVertical ? props.verticalViewPortHeight : "auto";
    var backwardNavigator = createBackwardNavigator();
    var forwardNavigator = createForwardNavigator();
    var className2 = classNames("p-carousel-container", props.containerClassName);
    var itemsContentProps = mergeProps({
      className: "p-carousel-items-content",
      style: {
        height
      },
      onTouchStart: function onTouchStart(e) {
        return _onTouchStart(e);
      },
      onTouchMove: function onTouchMove(e) {
        return _onTouchMove(e);
      },
      onTouchEnd: function onTouchEnd(e) {
        return _onTouchEnd(e);
      }
    }, ptm("itemsContent"));
    var containerProps = mergeProps({
      className: className2
    }, ptm("container"));
    var itemsContainerProps = mergeProps({
      ref: itemsContainerRef,
      className: "p-carousel-items-container",
      onTransitionEnd
    }, ptm("itemsContainer"));
    return React5.createElement("div", containerProps, backwardNavigator, React5.createElement("div", itemsContentProps, React5.createElement("div", itemsContainerProps, items)), forwardNavigator);
  };
  var createBackwardNavigator = function createBackwardNavigator2() {
    if (props.showNavigators) {
      var isDisabled = (!circular || props.value && props.value.length < numVisibleState) && currentPage === 0;
      var _className = classNames("p-carousel-prev p-link", {
        "p-disabled": isDisabled
      });
      var iconClassName = "p-carousel-prev-icon";
      var previousButtonIconProps = mergeProps({
        className: iconClassName
      }, ptm("previousButtonIcon"));
      var icon = isVertical ? props.prevIcon || React5.createElement(ChevronUpIcon, previousButtonIconProps) : props.prevIcon || React5.createElement(ChevronLeftIcon, previousButtonIconProps);
      var backwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, previousButtonIconProps), {
        props
      });
      var previousButtonProps = mergeProps({
        type: "button",
        className: _className,
        onClick: function onClick(e) {
          return navBackward(e);
        },
        disabled: isDisabled,
        "aria-label": ariaLabel("previousPageLabel")
      }, ptm("previousButton"));
      return React5.createElement("button", previousButtonProps, backwardNavigatorIcon, React5.createElement(Ripple, null));
    }
    return null;
  };
  var createForwardNavigator = function createForwardNavigator2() {
    if (props.showNavigators) {
      var isDisabled = (!circular || props.value && props.value.length < numVisibleState) && (currentPage === totalIndicators - 1 || totalIndicators === 0);
      var _className2 = classNames("p-carousel-next p-link", {
        "p-disabled": isDisabled
      });
      var iconClassName = "p-carousel-next-icon";
      var nextButtonIconProps = mergeProps({
        className: iconClassName
      }, ptm("nextButtonIcon"));
      var icon = isVertical ? props.nextIcon || React5.createElement(ChevronDownIcon, nextButtonIconProps) : props.nextIcon || React5.createElement(ChevronRightIcon, nextButtonIconProps);
      var forwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, nextButtonIconProps), {
        props
      });
      var nextButtonProps = mergeProps({
        type: "button",
        className: _className2,
        onClick: function onClick(e) {
          return navForward(e);
        },
        disabled: isDisabled,
        "aria-label": ariaLabel("nextPageLabel")
      }, ptm("nextButton"));
      return React5.createElement("button", nextButtonProps, forwardNavigatorIcon, React5.createElement(Ripple, null));
    }
    return null;
  };
  var createIndicator = function createIndicator2(index) {
    var isActive = currentPage === index;
    var key = "carousel-indicator-" + index;
    var className2 = classNames("p-carousel-indicator", {
      "p-highlight": isActive
    });
    var indicatorProps = mergeProps({
      key,
      className: className2
    }, ptm("indicator"));
    var indicatorButtonProps = mergeProps({
      type: "button",
      className: "p-link",
      onClick: function onClick(e) {
        return onDotClick(e, index);
      },
      "aria-label": "".concat(ariaLabel("pageLabel"), " ").concat(index + 1)
    }, ptm("indicatorButton"));
    return React5.createElement("li", indicatorProps, React5.createElement("button", indicatorButtonProps, React5.createElement(Ripple, null)));
  };
  var createIndicators = function createIndicators2() {
    if (props.showIndicators) {
      var _className3 = classNames("p-carousel-indicators p-reset", props.indicatorsContentClassName);
      var _indicators = [];
      for (var i = 0; i < totalIndicators; i++) {
        _indicators.push(createIndicator(i));
      }
      var indicatorsProps = mergeProps({
        className: _className3
      }, ptm("indicators"));
      return React5.createElement("ul", indicatorsProps, _indicators);
    }
    return null;
  };
  var className = classNames("p-carousel p-component", {
    "p-carousel-vertical": isVertical,
    "p-carousel-horizontal": !isVertical
  }, props.className);
  var contentClassName = classNames("p-carousel-content", props.contentClassName);
  var content = createContent();
  var indicators = createIndicators();
  var header = createHeader();
  var footer = createFooter();
  var rootProps = mergeProps({
    id: props.id,
    ref: elementRef,
    className,
    style: props.style
  }, CarouselBase.getOtherProps(props), ptm("root"));
  var contentProps = mergeProps({
    className: contentClassName
  }, ptm("content"));
  return React5.createElement("div", rootProps, header, React5.createElement("div", contentProps, content, indicators), footer);
}));
CarouselItem.displayName = "CarouselItem";
Carousel.displayName = "Carousel";
export {
  Carousel
};
//# sourceMappingURL=primereact_carousel.js.map
